{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/learning-log-website/docs/JavaScript基础/",
    "result": {"data":{"markdownRemark":{"fields":{"slug":"/learning-log-website/docs/CSS&CSS3/"},"html":"<h1>CSS</h1>\n<h2>1.css简介</h2>\n<p>CSS 指层叠样式表 (Cascading Style Sheets)</p>\n<p>它可以</p>\n<ul>\n<li>定义如何<strong>显示</strong> HTML 元素</li>\n<li>解决内容与表现<strong>分离</strong>的问题</li>\n<li>极大提高工作效率</li>\n<li>将多重样式将层叠为一个</li>\n</ul>\n<p>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p>\n<ol>\n<li>浏览器缺省设置</li>\n<li>外部样式表<code>&#x3C;link rel=\"stylesheet\" type=\"text/css\" href=\"sheet1.css\" media=\"all\" /></code></li>\n<li>内部样式表/嵌入式（位于 <code>&#x3C;head></code> 标签内部）``</li>\n<li>内联样式（在 HTML 元素内部）<code>&#x3C;p style=\"color:red\">这里文字是红色。&#x3C;/p></code></li>\n</ol>\n<p>即</p>\n<p><strong>内联式>嵌入式>外部式>浏览器缺省设置</strong></p>\n<h2>2.CSS属性</h2>\n<h3>1.css文本属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-text.html\">文本属性</a></p>\n<h3>2.背景属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-background.html\">背景属性</a></p>\n<h3>3.列表属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-list.html\">列表属性</a></p>\n<h3>4.显示属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-display-visibility.html\">显示属性</a></p>\n<h3>5.盒模型</h3>\n<p><a href=\"https://www.runoob.com/css/css-boxmodel.html\">盒模型</a></p>\n<h3>6.浮动属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-float.html\">浮动属性</a></p>\n<h3>7.定位属性</h3>\n<p><a href=\"https://www.runoob.com/css/css-positioning.html\">定位属性</a></p>\n<h2>3.选择器（重点）</h2>\n<h3>1.基础选择器</h3>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>通配符选择器</strong> *</td>\n<td>*</td>\n<td>匹配所有元素。（匹配范围太广，很少用到）</td>\n</tr>\n<tr>\n<td><strong>id选择器</strong> #id</td>\n<td>#element-id</td>\n<td>匹配id为<code>element-id</code>元素</td>\n</tr>\n<tr>\n<td><strong>class选择器</strong> .class</td>\n<td>.element-class</td>\n<td>匹配class<strong>包含</strong>(不是等于)<code>element-class</code>元素</td>\n</tr>\n<tr>\n<td><strong>标签选择器</strong> element</td>\n<td>p</td>\n<td>****匹配标签类型为<code>p</code>的所有元素</td>\n</tr>\n</tbody>\n</table>\n<h3>2.组合选择器</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">选择器</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">多元素选择器               E,F</td>\n<td>div,p</td>\n<td>同时匹配元素E或元素F，例子中的含义为匹配所有的<code>&#x3C;div></code>和<code>&#x3C;p></code></td>\n</tr>\n<tr>\n<td align=\"left\">后代选择器            E F</td>\n<td>div p</td>\n<td>用<strong>空格</strong>分隔，匹配E元素所有的<strong>后代</strong>（不只是子元素、子元素向下递归）符合 F 的元素，例子中的含义为匹配所有的在<code>&#x3C;div></code>下的<code>&#x3C;p></code></td>\n</tr>\n<tr>\n<td align=\"left\">直接子元素选择器                      E>F</td>\n<td>div>p</td>\n<td>用<code>></code>分隔，匹配E元素的所有<strong>直接子元素</strong>，例子中的含义为匹配所有<code>&#x3C;div></code>的直接子元素且是<code>&#x3C;p></code></td>\n</tr>\n<tr>\n<td align=\"left\">毗邻选择器       E+F</td>\n<td>div+p</td>\n<td>匹配E元素之后的<strong>相邻</strong>的同级元素F，例子中的含义为匹配<strong>紧接</strong>在 <code>&#x3C;div></code> 之后的所有 <code>&#x3C;p></code> 元素</td>\n</tr>\n<tr>\n<td align=\"left\">兄弟选择器        E~F</td>\n<td>div~p</td>\n<td>匹配E元素之后的同级元素F（无论直接相邻与否），例子中的含义为匹配紧<code>&#x3C;div></code> 之后的所有 <code>&#x3C;p></code> 元素</td>\n</tr>\n<tr>\n<td align=\"left\">同时满足选择器 EF</td>\n<td>.class1.class2</td>\n<td>EF 连写，匹配同时满足 E 和 F 的元素，例子中的含义为匹配 <code>class</code> 中同时有 <code>class1</code> 和 <code>class2</code> 的元素</td>\n</tr>\n</tbody>\n</table>\n<h3>3.属性选择器</h3>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[attr]</td>\n<td>input[disabled]</td>\n<td>匹配所有具有属性attr的元素，例子中的含义为选择所有有<code>disabled</code>属性的<code>&#x3C;input></code></td>\n</tr>\n<tr>\n<td>[attr = value]</td>\n<td>[id=did]</td>\n<td>匹配属性attr值为value的元素，例子等价于<code>#did</code></td>\n</tr>\n<tr>\n<td>[attr ~= value]</td>\n<td>[class~=dclass]</td>\n<td>匹配所有属性attr具有多个空格分隔、其中一个值等于value的元素，例子等价于<code>.dclass</code></td>\n</tr>\n<tr>\n<td>[attr ^= value]</td>\n<td>div[class^=d]</td>\n<td>匹配属性attr的值以value<strong>开头</strong>的元素，例子可以匹配<code>&#x3C;div class=\"dclass\"></code></td>\n</tr>\n<tr>\n<td>[attr $= value]</td>\n<td>div[class$=d]</td>\n<td>匹配属性attr的值以value<strong>结尾</strong>的元素，例子可以匹配<code>&#x3C;div class=\"classd\"></code></td>\n</tr>\n<tr>\n<td>[attr *= value]</td>\n<td>div[class*=d]</td>\n<td>匹配属性attr的值<strong>包含</strong>value的元素，例子可以匹配<code>&#x3C;div class=\"somedsome\"></code></td>\n</tr>\n</tbody>\n</table>\n<h3>4.伪类选择器</h3>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-child</td>\n<td>匹配元素E的第一个子元素</td>\n</tr>\n<tr>\n<td>E:link</td>\n<td>匹配所有未被点击的链接</td>\n</tr>\n<tr>\n<td>E:visited</td>\n<td>匹配所有已被点击的链接</td>\n</tr>\n<tr>\n<td>E:active</td>\n<td>匹配鼠标已经其上按下、还没有释放的E元素</td>\n</tr>\n<tr>\n<td>E:hover</td>\n<td>匹配鼠标悬停其上的E元素</td>\n</tr>\n<tr>\n<td>E:focus</td>\n<td>匹配获得当前焦点的E元素</td>\n</tr>\n<tr>\n<td>E:enabled</td>\n<td>匹配表单中可用的元素</td>\n</tr>\n<tr>\n<td>E:disabled</td>\n<td>匹配表单中禁用的元素</td>\n</tr>\n<tr>\n<td>E:checked</td>\n<td>匹配表单中被选中的radio或checkbox元素</td>\n</tr>\n<tr>\n<td>E:nth-child(n)</td>\n<td>匹配其父元素的第n个子元素，第一个编号为1</td>\n</tr>\n<tr>\n<td>E:nth-last-child(n)</td>\n<td>匹配其父元素的倒数第n个子元素，第一个编号为1</td>\n</tr>\n<tr>\n<td>E:nth-of-type(n)</td>\n<td>与:nth-child()作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:nth-last-of-type(n)</td>\n<td>与:nth-last-child() 作用类似，但是仅匹配使用同种标签的元素</td>\n</tr>\n<tr>\n<td>E:last-child</td>\n<td>匹配父元素的最后一个子元素，等同于:nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:first-of-type</td>\n<td>匹配父元素下使用同种标签的第一个子元素，等同于:nth-of-type(1)</td>\n</tr>\n<tr>\n<td>E:last-of-type</td>\n<td>匹配父元素下使用同种标签的最后一个子元素，等同于:nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:only-child</td>\n<td>匹配父元素下仅有的一个子元素，等同于:first-child:last-child或 :nth-child(1):nth-last-child(1)</td>\n</tr>\n<tr>\n<td>E:only-of-type</td>\n<td>匹配父元素下使用同种标签的唯一一个子元素，等同于:first-of-type:last-of-type或 :nth-of-type(1):nth-last-of-type(1)</td>\n</tr>\n<tr>\n<td>E:empty</td>\n<td>匹配一个不包含任何子元素的元素，文本节点也被看作子元素</td>\n</tr>\n<tr>\n<td>E:not(selector)</td>\n<td>匹配不符合当前选择器的任何元素</td>\n</tr>\n</tbody>\n</table>\n<h3>5.伪元素选择器</h3>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E:first-line</td>\n<td>匹配E元素内容的第一行</td>\n</tr>\n<tr>\n<td>E:first-letter</td>\n<td>匹配E元素内容的第一个字母</td>\n</tr>\n<tr>\n<td>E:before</td>\n<td>在E元素之前插入生成的内容</td>\n</tr>\n<tr>\n<td>E:after</td>\n<td>在E元素之后插入生成的内容</td>\n</tr>\n</tbody>\n</table>\n<h3>6.选择器优先级</h3>\n<p>css的继承：指应用在一个标签上的那些 CSS 属性被传到其子标签上</p>\n<p>优先规则：</p>\n<p>最近的祖先样式比其他祖先样式优先级高</p>\n<p>\"直接样式\"比\"祖先样式\"优先级高</p>\n<p>内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器</p>\n<p>权重：标签:1；class:10；id:100；style:1000；!important：有!important声明的规则高于一切</p>\n<p>CSS 优先级<strong>从高到低分别是</strong></p>\n<ol>\n<li>在属性后面使用 <code>!important</code> 会覆盖页面内任何位置定义的元素样式</li>\n<li>作为style属性写在元素标签上的<strong>内联</strong>样式</li>\n<li>id选择器</li>\n<li>类选择器=伪类选择器=属性选择器</li>\n<li>标签选择器=伪元素选择器</li>\n<li>通配符选择器</li>\n<li>浏览器自定义</li>\n</ol>\n<h2>4.常用布局</h2>\n<h3>1.布局基础</h3>\n<p>基于盒模型，依赖 display 属性 + position属性 + float属性实现的</p>\n<h3>2.浮动</h3>\n<h3>3.清除浮动（重点）</h3>\n<h4>1.概念</h4>\n<p>容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象，这个现象叫浮 动溢出，</p>\n<h4>2.方法</h4>\n<p>共有2个方向：一是利用 clear 属性，二是触 发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素</p>\n<p>具体方法：</p>\n<ul>\n<li>\n<p>使用带clear属性的空元素（优点：简单，代码少，浏览器兼容性好。缺点：需添加无语义的html元素，代码不够优 雅， 后期不容易维护）</p>\n</li>\n<li>\n<p>使用CSS的overflow属性</p>\n</li>\n<li>\n<p>给浮动的元素的容器添加浮动</p>\n</li>\n<li>\n<p>使用邻接元素处理：给浮动元素后面的元素添加clear属性</p>\n</li>\n<li>\n<p>使用CSS的:after伪元素</p>\n<pre><code class=\"language-js\">.clearfix::after{\r\n    content:\"\";\r\n    display:block;\r\n    clear:both;\r\n    height:0;\r\n}\n</code></pre>\n</li>\n</ul>\n<h3>4.弹性布局（重点）</h3>\n<p><a href=\"https://www.runoob.com/css3/css3-flexbox.html\">弹性布局</a></p>\n<h3>5.响应式布局</h3>\n<blockquote>\n<p>响应式布局：根据不同屏幕的分辨率来浏览网页的不同展示方式。</p>\n<p>自适应：不同屏幕尺寸大小的多套代码。</p>\n</blockquote>\n<h2>5.函数&#x26;动画</h2>\n<h3>1.css常用函数汇总</h3>\n<ul>\n<li>\n<p>属性函数：attr()；</p>\n</li>\n<li>\n<p>背景图片函数：linear-gradient()、radial-gradient()、conic-gradient()、repeating-linear-gradient()、repeating-radial-gradient()、repeating-conic-gradient()、image-set()、image()、url()、element()；</p>\n</li>\n<li>\n<p>颜色函数：rgb()、rgba()、hsl()、hsla()、hwb()、color-mod()；</p>\n</li>\n<li>\n<p>图形函数：circle()、ellipse()、inset()、polygon()、path()</p>\n</li>\n<li>\n<p>滤镜函数：blur()、brightness()、contrast()、drop-shadow()、grayscale()、hue-rotate()、invert()、opacity()、saturate()、sepia()；</p>\n</li>\n<li>\n<p>转换函数：matrix()、matrix3d()、perspective()、rotate()、rotate3d()、rotateX()、rotateY()、rotateZ()、scale()、scale3d()、scaleX()、scaleY()、scaleZ()、skew()、skewX()、skewY()、translate()、translateX()、translateY()、translateZ()、translate3d()；</p>\n</li>\n<li>\n<p>数学函数：calc()、min()、max()、mixmax()、repeat()；</p>\n</li>\n<li>\n<p>缓动函数：cubic-bezier()、steps()；</p>\n</li>\n<li>\n<p>其他函数：counter()、counters()、toggle()、var()、 symbols()</p>\n</li>\n</ul>\n<p>注意：由于<code>&#x3C;gradient></code>数据类型系<code>&#x3C;image></code>的子数据类型，<code>&#x3C;gradient></code>只能被用于<code>&#x3C;image></code>可以使用的地方。因此，linear-gradient() 并不适用于background-color以及类似的使用 color数据类型的属性中</p>\n<h3>2.动画</h3>\n<h4>1.keyframes</h4>\n<p><code>@keyframes animationname {keyframes-selector {css-styles;}}</code></p>\n<p><strong>animationname</strong>，必需，定义动画的名称</p>\n<p><strong>keyframes-selector</strong>，必需，动画时长的百分比，合法的值： 0-100% from（与 0% 相同） to（与 100% 相同</p>\n<p><strong>css-styles</strong>，必需，一个或多个合法的 CSS 样式属性</p>\n<h4>2.animation 属性</h4>\n<p>一个简写属性，用于设置六个动画属性 (animation: name duration timing-function delay iteration-count direction)</p>\n<p>​\t <strong>animation-name</strong>，规定需要绑定到选择器的keyframes的animationname名称</p>\n<p>​\t <strong>animation-duration</strong>，设置动画的持续时间，单位为s，默认值为0</p>\n<p>​\t <strong>animation-timing-function</strong>，设置过渡效果的速率，它有6种形式的速率</p>\n<pre><code>**animation-delay**，设置动画的开始时间，单位是s或者ms，默认值为0\n</code></pre>\n<p>​\t <strong>animation-iteration-count</strong>，设置动画循环的次数，默认为1，infinite为无限次数的循环</p>\n<p>​\t <strong>animation-direction</strong>，设置动画播放的方向，默认值为normal表示向前播放，alternate代表动画播放在第偶数次向 前播放，第奇数次向反方向播放</p>\n<p>​\t <strong>animation-play-state</strong>，控制动画的播放状态：running代表播放，而paused代表停止播放，running为默认值</p>\n<p>​\t <strong>animation</strong>，它是animation-name、animation-duration、animation-timing-function、animation-delay、 animation-iteration-count、animation-direction的简写</p>\n<h4>3.transform(转换)</h4>\n<p>用来设置元素的形状改变，<strong>不改变</strong>元素原先在文档流中的位置，主要有以下几种变形：<strong>rotate（旋转）</strong>、scale（缩放）、skew（扭曲）、**translate（移动）**和matrix（矩阵变形）</p>\n<p><strong>transform-origin</strong> **基点，**所有的变形都是基于基点，基点默认为元素的中心点</p>\n<p><strong>1.translate</strong></p>\n<p>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。</p>\n<p>如下代码可以将一个 <code>div</code> 向右平移 <code>50px</code>，向下平移 <code>100px</code></p>\n<pre><code class=\"language-css\">div {\r\n  transform: translate(50px,100px)\r\n}\n</code></pre>\n<p><strong>2.rotate</strong></p>\n<p>rotate()方法，在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。</p>\n<p>如下代码可以将一个 <code>div</code> 旋转30度</p>\n<pre><code class=\"language-css\">div {\r\n  transform: rotate(30deg);\r\n}\n</code></pre>\n<p><strong>3.scale</strong></p>\n<p>scale()方法，该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数；</p>\n<p>如下代码可以将一个 <code>div</code> 水平拉升到原来的 2 倍，垂直拉升到原来的 3 倍</p>\n<pre><code class=\"language-css\">div {\r\n  transform:scale(2,3)\r\n}\n</code></pre>\n<h4>4.transition（渐变）</h4>\n<p>用来设置样式的属性值是如何从从一种状态变平滑过渡到另外一种状态，它有四个属性</p>\n<p><strong>transition-property</strong>（变换的属性，即那种形式的变换：大小、位置、扭曲等）</p>\n<p><strong>transition-duration</strong>（变换延续的时间）</p>\n<p><strong>transition-timing-function</strong>（变换的速率）</p>\n<p><strong>transition-delay</strong>（变换的延时）</p>\n<p><strong>transition</strong>：它是transition-property、transition-duration、transition-timing-function、transition-delay的简写</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">transition</td>\n<td align=\"left\">简写属性，用于在一个属性中设置四个过渡属性。</td>\n</tr>\n<tr>\n<td align=\"left\">transition-property</td>\n<td align=\"left\">规定应用过渡的 CSS 属性的名称。</td>\n</tr>\n<tr>\n<td align=\"left\">transition-duration</td>\n<td align=\"left\">定义过渡效果花费的时间。默认是 0。</td>\n</tr>\n<tr>\n<td align=\"left\">transition-timing-function</td>\n<td align=\"left\">规定过渡效果的时间曲线。默认是 \"ease\"。</td>\n</tr>\n<tr>\n<td align=\"left\">transition-delay</td>\n<td align=\"left\">规定过渡效果何时开始。默认是 0。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，<code>transition-timing-function</code> 可选值如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">linear</td>\n<td align=\"left\">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td>\n</tr>\n<tr>\n<td align=\"left\">ease</td>\n<td align=\"left\">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td>\n</tr>\n<tr>\n<td align=\"left\">ease-in</td>\n<td align=\"left\">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td>\n</tr>\n<tr>\n<td align=\"left\">ease-out</td>\n<td align=\"left\">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td align=\"left\">ease-in-out</td>\n<td align=\"left\">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td align=\"left\">cubic-bezier(n,n,n,n)</td>\n<td align=\"left\">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td>\n</tr>\n</tbody>\n</table>\n<h2>6.预处理&#x26;工程化（重要）</h2>\n<p>CSS预处理器提供CSS缺失的样式层复用机制，减少冗余代码，提高样式代码的可维护性</p>\n<p>文件切分：把一个大的 CSS 文件在切分成多个小文件，实现初步模块化</p>\n<h3>1.less</h3>\n<p>less是一门向后兼容的 CSS 扩展语言，包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具</p>\n<p><strong>变量：</strong>@变量名: 值;</p>\n<p>作为css属性值：width: @len;</p>\n<p>作为属性名：@{bg}: @basecolor;</p>\n<p>作为选择器：#@{activeclass} {}</p>\n<p>**变量作用域：**第一步： 使用变量，在本作用域里找, 找到了， 使用最后面的定义；第二步： 本作用域找不到，去上级作用域找</p>\n<p>**导入：**导入混合 如果导入的是less文件，可以省略 后缀，@import \"mixins/mixins\"; @import \"variables\"; @import \"base\"; @import \"style.css\";</p>\n<p>运算：两个不同单位参与运算以第一个为准，颜色可以参与运算</p>\n<h3>2.BEM 命名规范</h3>\n<p>块（block）、元素（element）、修饰符（modifier）</p>\n<ul>\n<li>\n<p>块即是通常所说的 Web 应用开发中的组件或模块。每个块在逻辑上和功能上都是相互独立的，.block { }</p>\n</li>\n<li>\n<p>元素是块中的组成部分。元素不能离开块来使用。BEM 不推荐在元素中嵌套其他元素，.block__element { }</p>\n</li>\n<li>\n<p>修饰符用来定义块或元素的外观和行为。同样的块在应用不同的修饰符之后，会有不同的外观，.block--modifier { }</p>\n</li>\n</ul>\n<h3>3.CSS Modules</h3>\n<p>代码中的每一个类名都是引入对象的一个属性, 编译时会将 css 类名 加上唯一 hash，解决css命名冲突问题</p>\n<ul>\n<li>\n<p>css module 作用域：作用域默认为 local 即只在当前模块生效</p>\n</li>\n<li>\n<p>global 被 :global 包裹起来的类名，不会被模块化</p>\n</li>\n</ul>\n<p>使用方式如下：</p>\n<ol>\n<li>\n<p>定义 css 文件： style.css</p>\n</li>\n<li>\n<p>在 js 模块中导入 css 文件：import styles from \"./style.css\";</p>\n</li>\n<li>\n<p>配置 css-loader 打包：CSS Modules 不能直接使用，而是需要进行打包，一般通过配置 css-loader 中的 modules 属性即可完成  css modules 的配置</p>\n</li>\n</ol>\n<p>最终打包出来的 css 类名就是由一长串 hash 值生成</p>\n<h3>4.CSS In JS</h3>\n<p>所有的 css 代码全部放在组件内部，以实现 css 的模块化</p>\n<pre><code class=\"language-css\">import React from \"react\";\r\nimport styled from \"styled-components\"; \r\n// 创建一个带样式的 h1 标签\r\nconst Title = styled.h1`font-size:1.5em;text-align:center;color:palevioletred;`;\n</code></pre>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210706125913798.png\" alt=\"image-20210706125913798\"></p>","id":"6703b41e-6d1b-59b3-92c0-d7e6e00fa421","frontmatter":{"title":"CSS"}}},"pageContext":{"slug":"/learning-log-website/learning-log-website/docs/JavaScript基础/"}},
    "staticQueryHashes": ["3649515864"]}