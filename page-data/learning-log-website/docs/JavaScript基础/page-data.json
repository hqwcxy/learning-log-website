{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/learning-log-website/docs/JavaScript基础/",
    "result": {"data":{"markdownRemark":{"html":"<h1>JavaScript基础笔记</h1>\n<h2>1.JavaScript简介</h2>\n<p>一种基于对象和事件驱动并具有相对安全性并广泛用于客户端网页开发的脚本语言；</p>\n<p>一种广泛用于客户端Web开发的脚本语言</p>\n<p><strong>ECMAScript</strong>：描述了该语言的语法和基本对象；</p>\n<p>文档对象模型<strong>DOM</strong>：描述处理<strong>网页内容</strong>的方法和接口</p>\n<p>浏览器对象模型<strong>BOM</strong>：描述与<strong>浏览器</strong>进行交互的方法和接口</p>\n<h2>2.JavaScript数据类型</h2>\n<h3>基础类型</h3>\n<p>特点：存放在栈中，占据空间小，<strong>大小固定，因此不可改变</strong></p>\n<p>五种基本类型：<strong>undefined、null 、number 、string 、boolean</strong></p>\n<p>（1）undefined</p>\n<p>在变量被声明，但未被初始化时为 undefined</p>\n<pre><code class=\"language-js\">var a;\r\n\r\nconsole.log(a);\n</code></pre>\n<p>判断变量是否为 undefined</p>\n<pre><code class=\"language-js\">console.log(typeof a === ‘undefined’);\n</code></pre>\n<p>（2）null</p>\n<p>表示一个空对象指针</p>\n<pre><code class=\"language-js\">var b = null;\r\n\r\nb = { name: ‘wang’ }\n</code></pre>\n<p>typeof 返回 object</p>\n<pre><code class=\"language-js\">console.log(typeof null) // object\r\n\r\nnull === null // true\n</code></pre>\n<p>（3）number</p>\n<p>浮点类型计算</p>\n<p>（由于实际上是以二进制存在双精度 64 位的存储器里，所以会发生精度丢失的问题，导致小数计算时出现偏差：）</p>\n<p>NaN</p>\n<p>计算时<strong>返回数值未返回的情况</strong>，比如，除数为 0 的情况。</p>\n<p>（4）string</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">\\n</td>\n<td align=\"center\">换行</td>\n</tr>\n<tr>\n<td align=\"center\">\\t</td>\n<td align=\"center\">制表</td>\n</tr>\n<tr>\n<td align=\"center\">\\r</td>\n<td align=\"center\">回车</td>\n</tr>\n<tr>\n<td align=\"center\">\\b</td>\n<td align=\"center\">退格</td>\n</tr>\n</tbody>\n</table>\n<p>字符串为不可变类型</p>\n<pre><code class=\"language-js\">var a = ‘today’;\r\n\r\nvar b = a + ‘is sunday’;\n</code></pre>\n<p>（5）boolean</p>\n<p>字面值有两个： true false</p>\n<table>\n<thead>\n<tr>\n<th>参数类型</th>\n<th>true</th>\n<th>false</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Number</td>\n<td>非  NaN,非 0</td>\n<td>NaN/0</td>\n</tr>\n<tr>\n<td>String</td>\n<td>非空字符串</td>\n<td>空字符串</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>非空对象</td>\n<td>null</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td></td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>true</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3>引用类型</h3>\n<p>特点：存放的是<strong>一个地址</strong></p>\n<p>常用的应用类型：<strong>object、array、Date、RegExp</strong>等</p>\n<p>（1）Object</p>\n<p>创建方式：</p>\n<pre><code class=\"language-js\">var a = {\r\n\r\n name: 'wang'\r\n\r\n}  //  对象字面量\n</code></pre>\n<p>对象属性访问</p>\n<pre><code class=\"language-js\">a[’name’];\r\n\r\na.name;\n</code></pre>\n<p>（2）array</p>\n<p>创建方式：</p>\n<pre><code class=\"language-js\">var a = new Array(10);\r\n\r\nvar b = new Array(1, 2, 3);  [1,2,3]\r\n\r\nvar c = [1,2,3];\n</code></pre>\n<p>检测类型：</p>\n<pre><code class=\"language-js\">Array.isArray(value);\r\n\r\nObject.prototype.toString.call(value);\n</code></pre>\n<p>常用数组方法：</p>\n<pre><code class=\"language-js\">var a = [1,2];\r\n\r\nvar b = a.push(3);  // 3\r\n\r\nvar c = a.pop()   // 2\n</code></pre>\n<pre><code class=\"language-js\">var a = [1,2];\r\nvar b = a.unshift(3)  // return 3  [3,1,2]\r\nvar c = a.shift()  // return 2 [1, 2]\n</code></pre>\n<pre><code class=\"language-js\">var a = [1,2,3,4];\r\nvar b = a.reverse(); [4,3,2,1,5]\r\nvar c = a.sort();\r\nvar d = a.sort((n, m) => n >= m ? 1 : -1)\n</code></pre>\n<pre><code class=\"language-js\">var a = [12,3,4];\r\nvar c = a.concat(22,33,[12,34]);  // [12,3,4,22,33,12,34]\r\nvar d = a.slice(2,4) //  第一个参数起始位（包含）， 第二个参数结束位(不包含)\r\n[…a.slice(0, 3), …a.slice(4)]\r\nvar e = c.splice(1, 1);  // [12,4,22,33,12,34] [3]\r\nvar e = c.splice(1, 2, ‘123’); // [12,’123’,33,12,34] \r\nvar e = c.splice(2, 0, ‘111’); // \n</code></pre>\n<pre><code class=\"language-js\">indexOf(value)\r\nlastIndexOf(value);\n</code></pre>\n<pre><code class=\"language-js\">every();\r\nmap();\r\nfilter();\r\nforEach();\r\nsome();\r\nreduce();\r\nreduceRight();\n</code></pre>\n<p>（3）Date</p>\n<pre><code class=\"language-js\">var a = new Date()\r\n\r\na.getTime();\r\n\r\na.getMonth();\n</code></pre>\n<p>（4）RegExp</p>\n<pre><code class=\"language-js\">var reg = / pattern /flags\r\n\r\n// flags:  g  i m\n</code></pre>\n<p>常用的正则匹配的方法： exec()、match()、test()</p>\n<pre><code class=\"language-js\">var text = \"mom and dad and baby\";\r\nvar pattern = /mom( and dad( and baby)?)?/gi;\r\nvar matches = pattern.exec(text);\r\nalert(matches.index); \r\nalert(matches.input); \r\nalert(matches[0]); \r\nalert(matches[1]); \r\nalert(matches[2]);\r\n//0\r\n// \"mom and dad and baby” \r\n// \"mom and dad and baby” \r\n// \" and dad and baby\"\r\n// \" and baby”\n</code></pre>\n<h2>3.作用域</h2>\n<h3>全局环境</h3>\n<p>Javascript 中当代码开始执行时，会<strong>首先创建一个全局的执行上下文</strong>，全局环境中的变量都存储在该执行上下文中。同时为了便于管理，这个全局的<strong>执行上下文会被推入执行上下文栈</strong>。在 javascript 运行过程中，<strong>全局执行上下文始终保持在栈底</strong>，直到<strong>程序运行结束，才会被推出并销毁</strong></p>\n<h3>函数环境</h3>\n<p>当一个<strong>被声明的函数被调用</strong>时，会创建<strong>独属于这个函数</strong>的执行上下文，并且将该执行上下文推入执行上下文栈，函数<strong>调用结束后</strong>，函数对应的<strong>执行上下文</strong>被推出并销毁。要注意的是在这个函数中如果调用了另外的函数B，则<strong>又会创建这个函数 B 的执行上下文，并推入栈</strong>。</p>\n<p>个人理解，执行上下文<strong>相当于一个函数执行的环境</strong>，javascript 将其存储在执行上下文栈中，在这个环境中<strong>保存了该函数可以访问的变量，以供函数运行时调用</strong>。而如果我们在函数中不断地创建新的函数，调用函数，则执行上下文栈会不断被推入上下文，如果<strong>调用次数过多，超过了堆栈可容纳的大小，则会造成堆栈溢出。这就是为什么有些递归次数过多的程序会发生堆栈溢出的问题。</strong></p>\n<h3>执行上下文</h3>\n<p>执行上下文中主要包含</p>\n<pre><code class=\"language-js\">context: {\r\n    VO,      // 变量对象\r\n    scope,  // 函数作用域链\r\n    this,   // 函数 this 指向\r\n}\n</code></pre>\n<pre><code class=\"language-js\">VO = {\r\n   arguments: {},  // 参数\r\n   a,  // 声明的变量\r\n   c: reference to function c,  // 声明的函数\r\n}\n</code></pre>\n<p><strong>注意：</strong></p>\n<p><strong>JS没有块级作用域(不包括 ES6 let/const）</strong></p>\n<pre><code class=\"language-js\">if (true) {\r\n  var color = \"blue\";\r\n}\r\nalert(color); //“blue\"\r\n\r\nif (true) {\r\n  let color = \"blue\";\r\n}\r\nalert(color); //“blue\"\r\n\n</code></pre>\n<p>在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象。</p>\n<p>局部变量在函数执行完毕后销毁。</p>\n<p>全局变量在页面关闭后销毁。</p>\n<h2>4.函数（递归、闭包、this 指向）</h2>\n<p>声明函数的方式有两种：</p>\n<p>函数声明</p>\n<pre><code class=\"language-js\">function getName(){}\n</code></pre>\n<p>函数表达式</p>\n<pre><code class=\"language-js\">var getName = function(){}\n</code></pre>\n<pre><code class=\"language-js\">console.log(getName());   // 可执行\r\nfunction getName(){}\r\n\r\nconsole.log(getName());  // 报错\r\nvar getName = function(){}\n</code></pre>\n<h3>递归</h3>\n<pre><code class=\"language-js\">function factorial (n) { \r\n  if (n === 1) { \r\n   return 1; \r\n  } \r\n  return n * factorial (n — 1); \r\n}\n</code></pre>\n<h4>闭包：</h4>\n<pre><code class=\"language-js\">function getSomething(){\r\n    var a = 12;\r\n    function doSomething(b){\r\n        var c = b + a;\r\n        console.log(c);\r\n    }\r\n    return doSomething\r\n}\r\n\r\nconst doSome = getSomething();\r\ndoSome(2);  // 14\r\ndoSome(3);  // 15\r\n\n</code></pre>\n<p>闭包指函数内部的函数被返回出去之后，在<strong>外侧函数被销毁后仍可以访问外侧函数内部的变量</strong>。</p>\n<p>（其实是将这个变量加入到了内部函数的作用域链中：)</p>\n<p>[[scope]]: [</p>\n<p>dosthScope:{arg, c}</p>\n<p>getstScope:{a = 12}</p>\n<p>globalScope</p>\n<p>]</p>\n<h3>this 指向</h3>\n<p>this 指向，一般按情况分为四种</p>\n<p>隐式绑定（普通绑定，在编程过程中较为常见）</p>\n<p>显式绑定（使用 call，apply 等方法进行手动绑定）</p>\n<p>new 关键字绑定 （创建实例时构造方法中的 this 指向）</p>\n<p>”词法“绑定（箭头函数）</p>\n<p><strong>隐式绑定：</strong></p>\n<p>指向调用函数的对象, 对象必须使用 obj.function() 的形势调用方法</p>\n<pre><code class=\"language-js\">const user = {\r\n  name: 'nena',\r\n  get: function() {\r\n    console.log(this.name);\r\n  }\r\n}\r\nuser.get(); // nena\r\nvar get_1 = user.get;\r\nget_1(); // undefined\n</code></pre>\n<p><strong>显式绑定：</strong></p>\n<pre><code class=\"language-js\">const user = {\r\n  name: 'nena',\r\n}\r\nfunction get() {\r\n  console.log(this.name);\r\nget() // undefined\r\nget.call(user);\n</code></pre>\n<p><strong>New 关键字绑定</strong></p>\n<p>（构造器中的 this 执行 new 出的实例）:</p>\n<pre><code class=\"language-js\">function Person(name, age) {\r\n this.name = name;\r\n this.age = age;\r\n}\r\nconst p = new Person('nena', 0);\r\nconsole.log(p.name);\n</code></pre>\n<p><strong>词法绑定（箭头函数中）：</strong></p>\n<pre><code class=\"language-js\">var user =  {\r\n  lang: ['java', 'sql', 'js'],\r\n  getLang: function () {\r\n     return this.lang.reduce ((pre, cur, i) => {\r\n        if(i === this.lang.length - 1){\r\n           return `${pre} and ${cur}.`;\r\n        }else {\r\n           return pre ? `${pre}, ${cur}` : cur;\r\n        }\r\n     }, '')\r\n  }\r\n}\r\nvar s = user.getLang();\r\nconsole.log(s);\n</code></pre>\n<p>箭头函数中的 this 指向最近作用域的 this</p>\n<p>如果找不到 this，则落于全局，严格模式下为 undefined, 非严格模式下为 window</p>\n<h2>5.原型链，继承</h2>\n<h3>原型链</h3>\n<p>每创建一个函数，就会为这个函数<strong>默认生成prototype的属性</strong>，该属性指向函数的原型对象，</p>\n<p>而原型对象中也会默认生成constructor属性，指向这个函数。</p>\n<p>通过构造函数可以为原型对象添加属性和方法。</p>\n<p>在<strong>创建实例时，实例中将包含一个指针，指向构造函数的原型对象</strong>。</p>\n<p>这个连接存在于实例和原型对象之间，而不是实例和构造器之间。</p>\n<p>以上所说的关系如下图所示。</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705160819992.png\" alt=\"image-20210705160819992\"></p>\n<pre><code class=\"language-js\">function Person(){}\r\n\r\nPerson.prototype.name = \"nena\";\r\nPerson.prototype.age = 23;\r\nPerson.prototype.get = function () {\r\n    console.log(this.name);\r\n};\r\n\r\nvar person1 = new Person();\r\nvar person2 = new Person();\r\n\n</code></pre>\n<h3>原型链继承</h3>\n<p>将一个原型对象的实例赋给另一个原型对象，那么这个原型对象中将会有指针指向第一个原型对象。关系如下图所示</p>\n<img src=\"C:\\Users\\CDLX\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210705161011791.png\" alt=\"image-20210705161011791\" style=\"zoom:100%;\" />\n<p>代码实现</p>\n<pre><code class=\"language-js\">function Person() {\r\n    this.hasName = true;  \r\n}\r\nPerson.prototype.get = function () {\r\n    return this.hasName;\r\n};\r\nfunction Student(){\r\n    this.hasSalary = false;\r\n}\r\nStudent.prototype = new Person();\r\nStudent.prototype.getSalary = function(){\r\n    return this.hasSalary;\r\n};\r\nvar student = new Student();\r\nconsole.log(student.get());\n</code></pre>\n<h2>6.DOM与事件处理</h2>\n<h3>DOM文档对象模型：</h3>\n<p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162207616.png\" alt=\"image-20210705162207616\"></p>\n<p>常用的节点操作方法：</p>\n<pre><code class=\"language-js\">var div = document.getElementById(\"myDiv\");\r\nalert(div.id); \r\nalert(div.className);\r\nalert(div.getAttribute(\"id\")); \r\nalert(div.getAttribute(\"class\"));\r\ndiv.setAttribute(\"id\", \"someOtherId\"); \r\ndiv.setAttribute(\"class\", \"ft\");\r\ndiv.removeAttribute(\"class\");\r\n\n</code></pre>\n<p>节点获取</p>\n<pre><code class=\"language-js\">getElementId()\r\ngetElementsByClassName()\r\ngetElementsByName()\r\ngetElementsByTagName()\r\n\r\nquerySelector()  // 接收 css 选择符\r\n\r\nvar myDiv = document.querySelector(\"#myDiv”);\r\nvar selected = document.querySelector(\".selected”); // 只获取一个\r\nvar selecteds = document.querySelectorAll(\".selected”); //  获取所有\n</code></pre>\n<h3>BOM</h3>\n<p>BOM： 浏览器对象模型，是 javascript 可以运行在 web 浏览器的基础。</p>\n<p>常用 window 属性，方法：</p>\n<pre><code class=\"language-js\">window.innerWidth\r\nwindow.innerHeight\r\nwindow.screenTop\r\nwindow.screenLeft\r\n\r\nwindow.open()\r\n\r\nsetTimeout()\r\nclearTimeout()\r\n\r\nsetInterval()\r\nclearInterval()\n</code></pre>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162545357.png\" alt=\"image-20210705162545357\"></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>‘#contents'</td>\n</tr>\n<tr>\n<td>host</td>\n<td>’21.23.12.34:80'</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>'21.23.12.34'</td>\n</tr>\n<tr>\n<td>href</td>\n<td>完整  url</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>port</td>\n<td>端口</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>http、https</td>\n</tr>\n<tr>\n<td>search</td>\n<td>?name=xxx</td>\n</tr>\n</tbody>\n</table>\n<p>History： 记录历史地址</p>\n<pre><code class=\"language-js\">history.go(-1);\r\nhistory.go(1);\r\nhistory.back();\r\nhistory.forward();\n</code></pre>\n<h3>事件处理</h3>\n<p>（1）事件冒泡</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162715919.png\" alt=\"image-20210705162715919\"></p>\n<p>（2）事件捕获</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162737167.png\" alt=\"image-20210705162737167\"></p>\n<p>（3）先捕获后冒泡</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162756404.png\" alt=\"image-20210705162756404\"></p>\n<p>DOM0 事件处理程序：</p>\n<pre><code class=\"language-js\">\r\nvar btn = document.getElementById(\"myBtn\"); \r\nbtn.onclick = function(){\r\n   alert(\"Clicked\"); \r\n   console.log(this.id);\r\n   console.log(this.value);\r\n};\n</code></pre>\n<p>DOM2 事件处理程序：</p>\n<pre><code class=\"language-js\">var btn = document.getElementById(\"myBtn\");\r\nvar f = function(){\r\n  alert(this.id)\r\n}\r\nbtn.addEventListener(‘click’, f, false);\r\n// 将会在事件冒泡阶段被触发\r\n// true, 将会在事件捕获阶段被触发\n</code></pre>\n<p>事件处理时事件</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705162916393.png\" alt=\"image-20210705162916393\"></p>\n<h2>7.json&#x26;Ajax</h2>\n<h3>JSON</h3>\n<p>JSON数据结构可以方便地解析为javascript对象。</p>\n<p>JSON格式的数据中属性名必需且一定要加双引号。</p>\n<p>JSON 对象例子：</p>\n<pre><code class=\"language-js\">{\r\n    \"name\":\"nena\",\r\n    \"age\":23,\r\n    \"like\":[\"shin\",\"xuan\",\"wan\"],\r\n    \"get\":{\r\n            \"music\":\"rock\",\r\n            \"book\":\"gone with the wind\"\r\n          }\r\n}\n</code></pre>\n<p>stringify()方法用于将javascript对象序列化为JSON对象</p>\n<p>stringify() 不传递参数时：</p>\n<pre><code class=\"language-js\">var person={\r\n    name:\"nena\",\r\n    age:23,\r\n    like:[\"shin\",\"xuan\",\"lizhi”],\r\n    p: { name: “nena” }\r\n}\r\nvar JSONarr = JSON.stringify(person, );\r\n    alert(JSONarr);\r\n//{\"name\":\"nena\",\"age\":23,\"like\":[\"shin\",\"xuan\",\"lizhi\"]}\n</code></pre>\n<p>传递参数：</p>\n<p>第一个参数 可以是数组，也可以是函数（过滤函数）</p>\n<p>第二个参数 为数字或者字符串</p>\n<pre><code class=\"language-js\">var person={\r\n    name:\"nena\",\r\n    age:23,\r\n    like:[\"shin\",\"xuan\",\"lizhi\"]\r\n};\r\n\r\nvar JSONarr = JSON.stringify(person,[\"age\",\"like\"]);\r\n    alert(JSONarr);   \r\n//{\"age\":23,\"like\":[\"shin\",\"xuan\",\"lizhi\"]}\n</code></pre>\n<p>当第一个参数做为数组，可以选择JSON中需要的属性值。</p>\n<p>当第一个参数作为函数，可以过滤JSON的键值对，也可以对某个键的值做修改</p>\n<pre><code class=\"language-js\">var person={\r\n    name:\"nena\",\r\n    age:23,\r\n    like:[\"shin\",\"xuan\",\"lizhi\"]\r\n};\r\nvar JSONarr = JSON.stringify(person,function (key,value) {\r\n    switch(key){\r\n        case \"name\":\r\n            return ”nena\";\r\n        case \"age\":\r\n            return undefined;\r\n        default:\r\n            return value;\r\n    }\r\n});\r\n    alert(JSONarr);\r\n     //{\"name\":”nena\",\"like\":[\"shin\",\"xuan\",\"lizhi\"]}\r\n\n</code></pre>\n<p>第二个参数为数字或者字符串 表示JSON数据中的缩进</p>\n<pre><code class=\"language-js\">var person={\r\n    name:\"nena\",\r\n    age:23,\r\n    like:[\"shin\",\"xuan\",\"lizhi\"]\r\n};\r\n\r\nvar JSONarr = JSON.stringify(person,null,4);\r\n    alert(JSONarr);\r\n\n</code></pre>\n<p>parse()方法将JSON数据解析为javascript对象</p>\n<pre><code class=\"language-js\">var person={\r\n    name:\"nena\",\r\n    age:23,\r\n    like:[\"shin\",\"xuan\",\"lizhi\"]\r\n};\r\nvar JSONarr = JSON.stringify(person);\r\nvar person1 = JSON.parse(JSONarr);\r\n    alert(person1.age); //23\n</code></pre>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705163530620.png\" alt=\"image-20210705163530620\"></p>\n<h3>Ajax</h3>\n<p>Ajax: JavaScript执行异步网络请求</p>\n<pre><code class=\"language-js\">if (window.XMLHttpRequest) { // Mozilla, Safari, IE7+ ...\r\n    httpRequest = new XMLHttpRequest();\r\n} else if (window.ActiveXObject) { // IE 6 and older\r\n    httpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n}\r\nvar request = new httpRequest(); // 新建XMLHttpRequest对象\r\nrequest.onreadystatechange = function () { // 状态发生变化时，函数被回调\r\n    if (request.readyState === 4) { // 成功完成\r\n        // 判断响应结果:\r\n        if (request.status === 200) {\r\n            // 成功，通过responseText拿到响应的文本:\r\n            console.log(request.responseText)\r\n        } else {\r\n            // 失败，根据响应码判断失败原因:\r\n            console.log(request.status);\r\n        }\r\n    }\r\n}\r\n// 发送请求:\r\nrequest.open('GET', '/api/categories');\r\nrequest.send();\r\n\n</code></pre>\n<h2>8.任务队列和事件循环</h2>\n<p>js是单线程非阻塞的，为了在浏览器运行，操作 dom 时保持同步性，js 被设计为单线程。</p>\n<p>HTML5 web - worker 可以创建子线程，但是子线程无法独立执行，并且没有进行 i/o 操作的权限。</p>\n<p>单线程下实现非阻塞的机制就在于 js 中的<strong>事件循环</strong>：</p>\n<p><strong>同步函数的执行过程</strong>： 在 js 开始执行代码时会根据声明的函数创建一个个执行上下文，将其推入执行栈中，在实际执行函数时推出最顶的一个执行上下文激活为当前执行环境，然后依据其中的数据进行执行，执行完毕后销毁该环境。</p>\n<p><strong>异步函数的执行过程</strong>：执行时首先会被挂起（有一种说法时会被异步现成调用执行，具体内容有待查询），将其回调推送到任务队列中，在执行栈的内容后，主线程会去循环事件队列，查看是否有需要执行的回调，有的话执行回调。</p>\n<p><img src=\"C:%5CUsers%5CCDLX%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210705163718612.png\" alt=\"image-20210705163718612\"></p>\n<p>任务队列分为两种，宏任务队列和微任务队列，在主线程循环查看事件队列时首先执行完主执行栈（也相当于一个宏任务）会首先查看微任务，如果有的话先一次性执行完微任务，然后再执行一个宏任务，执行完以后再看有没有微任务。</p>\n<p>微任务有：<strong>new Pomise().then(), Promise.resolve().then(), process.nextTick()</strong></p>\n<p>宏任务有：<strong>setTimeout() setInterval() i/o操作 ui 交互事件 整个script脚本</strong></p>\n<pre><code class=\"language-js\">console.log('script start');\r\nsetTimeout(function() {\r\n  console.log('setTimeout');\r\n}, 0);\r\nPromise.resolve().then(function() {\r\n  console.log('promise1');\r\n}).then(function() {\r\n  console.log('promise2');\r\n});\r\nconsole.log('script end');\r\n\r\n// 最后输出:\r\n// script start、script end、promise1、promise2、setTimeout\n</code></pre>","frontmatter":{"title":"JavaScript基础笔记"}}},"pageContext":{"slug":"/learning-log-website/docs/JavaScript基础/"}},
    "staticQueryHashes": ["3649515864"]}