{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/docs/BOM&DOM/",
    "result": {"data":{"markdownRemark":{"html":"<h2>BOM</h2>\n<h4>一、BOM介绍：</h4>\n<p>1、BOM（ Browser Object Model）---> 浏览器对象模型。</p>\n<p>2、BOM 作用：主要提供了访问和操作浏览器各组件的方式。</p>\n<p>window浏览器窗口对象是js中最大的对象。其他所有的对象，都是window的子对象</p>\n<p>document文档对象，代表一个网页</p>\n<p>location地址栏对象，对地址栏的操作一些方法</p>\n<p>navigatior浏览器软件对象，主要用来判断用户用的是什么浏览器，可以解决兼容性问题</p>\n<p>screen屏幕对象，可以获取屏幕相关的信息</p>\n<p>history历史记录对象，可以对浏览器的历史记录进行相关的操作</p>\n<pre><code>注意点：\r\n\r\n1、window是全局浏览器内置顶级对象 表示浏览器中打开的窗口（没有应用于window对象的公开标准，不过所有浏览器都支持该对象）Window 对象表示一个浏览器窗口或一个框架。\r\n\r\n2、在客户端 JavaScript 中，Window 对象是全局对象，所有的表达式都在当前的环境中计算。也就是说，要引用当前窗口根本不需要特殊的语法，可以把那个窗口的属性作为全局变量来使用。\r\n\r\n例如，可以只写 document，而不必写 window.document。\r\n\r\n同样，可以把当前窗口对象的方法当作函数来使用，如只写 alert()，而不必写 Window.alert()。\r\n\r\n除了上面列出的属性和方法，Window 对象还实现了核心 JavaScript 所定义的所有全局属性和方法。\n</code></pre>\n<h4>二、window对象常用的方法</h4>\n<pre><code class=\"language-js\">1.prompt() 显示可提示用户输入的对话框\r\n\r\n2.alert() 显示一个带有提示信息和一个“确定”按钮的警示对话框\r\n\r\n3.confirm() 显示一个带有提示信息、“确定”和“取消”按钮的对话框\r\n\r\n4.close() 关闭浏览器窗口   close()方法用于关闭浏览器窗口，语法：window.close（）;\r\n\r\n5.定时器\r\n\r\na、间隔定时器setInterval（开启）  clearInterval（关闭）\r\n\r\nb、超时定时器setTimeout（开启）   clearTimeout（关闭）   \r\n          \r\n6. open()方法   功能：打开一个新的浏览器窗口\n</code></pre>\n<h4>三、location地址栏对象</h4>\n<pre><code class=\"language-js\">1、hostname 设置或返回当前URL的主机名\r\n\r\n2、href：获取地址栏中完整的地址。可以实现JS的网页跳转。location.href = “http://www.sina.com.cn”;\r\n\r\n3、pathname：文件路径及文件名\r\n\r\n4、protocol：协议，如：http://、ftp://\r\n\r\n5、hash：锚点名称。如：#top\r\n\r\n6、reload([true])：刷新网页。true参数表示强制刷新  \r\n\r\na、是网页浏览后，一般会在本地留下缓存，普通刷新的话，浏览器会优先获取缓存里的资源代替从服务器上请求，以提高访问速度。\r\n\r\nb、强制刷新就是告诉浏览器不要获取缓存，重新从服务器请求网页上的所有资源，适用于开发测试或者某些资源更新。\r\n\r\n7、注意：所有的属性，重新赋值后，网页将自动刷新。\r\n\r\n&#x3C;meta  http-equiv = “refresh”  content = “5;url=http://www.sina.com.cn” />\n</code></pre>\n<h4>四、navigator对象</h4>\n<pre><code>1、appName：浏览器软件名称   appCodeName\r\n\r\n2、appVersion：浏览器软件的核心版本号。\r\n\r\n3、platform：平台\r\n\r\n4、userAgent浏览器版本信息\n</code></pre>\n<p><a href=\"https://zhidao.baidu.com/question/1767408752449075980.html\">浏览器历史</a></p>\n<h4>五、history对象</h4>\n<pre><code>1、back（）  后退\r\n\r\n2、forward（） 前进\r\n\r\n3、go（） \r\n\r\n4、history.back（）===  history.go（-1） 浏览器中的  后退\r\n\r\n5、history.forward() === history.go  ( 1 )   浏览器中的  前进 \r\n\n</code></pre>\n<h4>六、screen屏幕对象</h4>\n<pre><code class=\"language-js\">1、Width：返回屏幕的宽度，只读属性。  window.screen.width \r\n\r\n2、Height：返回屏幕的高度，只读属性。 window.screen.height\r\n\r\n3、availWidth：屏幕的有效宽度，不含任务栏。只读属性。\r\n\r\n4、availHeight：屏幕的有效高度，不含任务栏。只读属性。\n</code></pre>\n<h4>七、window对象事件</h4>\n<pre><code>1、window.onload 当网页加载完成，指&#x3C;body>标记的所有内容全部加载完成，才触发该事件(条件)\r\n\r\n2、为窗口添加滚动条事件\r\n\r\nonscroll 滚动事件\r\n\r\nscrolltop 垂直滚动条滚动的距离\r\nscrollleft 水平滚动条滚动的距离\r\n \r\nwindow.innerHeight - 浏览器窗口的可见高度 \r\nwindow.innerWidth - 浏览器窗口的可见宽度 \r\n\r\n兼容写法：var scrolltop = document.documentElement.scrollTop||document.body.scrollTop; \r\n\r\n3、window.onresize 事件会在窗口或框架被调整大小时发生\n</code></pre>\n<p>使用JS操作CSS中的各种属性。JS只能操作或修改行内样式，对于类样式，通过className来赋值。</p>\n<p>如：imgObj.className=”imgClass”;</p>\n<p>1、style对象</p>\n<p>每个HTML标记，都有一个style属性。但这个style属性又是一个style对象。</p>\n<p>那么，这个style对象属性有哪些？style对象的属性，与CSS中的属性，一一对应。</p>\n<p>因此，style对象用来代替CSS。</p>\n<p>如：imgObj.style.border=”1px solid red”;</p>\n<p>2、style对象属性与CSS属性的转换</p>\n<p>(1)、如果是一个单词，style对象属性，与CSS属性一样。</p>\n<p>(2)、如果是多个单词，第一个单词全小写，后面每个单词首字母大写，并去掉中划线。</p>\n<h2>DOM</h2>\n<h4>一、DOM对象介绍</h4>\n<p>1、DOM Document Object Model ，文档对象模型。我们可以把网页中的所有“东西”看成是“对象”。</p>\n<p>2、DOM是W3C制定的网页标准或规则，而这个标准，在浏览器中，以“对象”的形式得以实现。</p>\n<p>3、DOM的官方定义：DOM可以使脚本，动态的访问或操作，网页的内容、网页外观、网页结构。</p>\n<h4>二、DOM的分类</h4>\n<p>1、核心DOM：提供了同时操作HTML文档和XML文档的公共的属性和方法。</p>\n<p>2、HTML DOM：针对HTML文档提供的专用的属性方法。</p>\n<p>3、XML DOM：针对XML文档提供的专用的属性和方法。(了解)</p>\n<p>4、CSS DOM：提供了操作CSS的属性和方法。</p>\n<p>5、Event DOM：事件对象模型。如：onclick、 onload等。（讲事件时再说）</p>\n<h4>四、核心DOM的操作</h4>\n<p>1、认识DOM中元素节点类型：</p>\n<pre><code>document文档节点，代表整个网页，不代表任何HTML标记。但它是html节点的父节点\r\n\r\nelement元素节点，指任何HTML标记。每一个HTML标记就称一个“元素节点”。它可以有文本节点和属性节点\r\n\r\nattribute属性节点。指HTML标记的属性\r\n\r\ntext节点。是节点树的最底节点\n</code></pre>\n<p>2、DOM中访问节点</p>\n<pre><code>firstChild：第1个子节点\r\n\r\nlastChild：最后1个子节点\r\n\r\nchildNodes：子节点列表，是一个数组  childNodes[0]\r\n\r\nparentNode：父节点\r\n\r\nnodeName：节点名称  返回标签名\r\n\r\nnodeValue 属性节点的的属性值\r\n\r\nnodeType 节点类型，返回值是数字  \r\n\r\n如果节点是元素节点，则 nodeType 属性将返回 1。如果节点是属性节点，则 nodeType 属性将返回 2。返回3是文本节点。如果是注释节点，返回8\r\n\r\n查找&#x3C;html>标记的方法\r\n\r\ndocument.documentElement\r\n\r\n查找&#x3C;body>标记的方法\r\n\r\ndocument.body\n</code></pre>\n<p>3、对节点的属性操作</p>\n<pre><code>setAttribute(name,value)：给某个节点添加一个属性\r\n\r\ngetAttributeNode(name)：获取某个节点属性的值\r\n\r\nremoveAttribute(name)：删除某个节点的属性\n</code></pre>\n<p>4、创建节点</p>\n<pre><code>document.createElement(tagName)：创建一个指定的HTML标记，一个节点\r\n\r\ntagName：是指不带尖括号的HTML标记名称  \r\n\r\n举例：var imgObj = document.createElement(“img”)\r\n\r\n\r\nparentNode.appendChild(childNode)：将创建的节点，追加到某个父节点下。\r\n\r\nparentNode代表父节点，父节点必须存在。\r\n\r\nchildNode代表子节点。\r\n\r\n举例：document.body.appendChild(imgObj)\r\n\r\nbox.insertBefore() 方法可在已有的子节点前插入一个新的子节点 先放要排在前面的元素， 再写其他元素\r\n\r\n参数1表示新建的节点  参数2表示你要插入在哪个节点之前\n</code></pre>\n<p>5、删除节点</p>\n<pre><code>parentNode.removeChild(childNode)：删除某个父节点下的子节点。\r\n\r\nparentNode代表父节点。\r\n\r\nchildNode代表要删除的子节点。\r\n\r\n举例：document.body.removeChild(imgObj)\r\n\r\nremove()直接删除当前项\n</code></pre>\n<h4>五、HTML DOM的操作</h4>\n<p>核心DOM中，提供的属性和方法，已经可以操作网页了。为什么还要有HTMLDOM呢？</p>\n<p>如果在核心DOM中，网页中节点层级很深时，访问这个节点时将十分麻烦。</p>\n<p>那么，HTMLDOM中就提供了通过id直接找节点的方法，而不用再HTML根节点开始。</p>\n<pre><code>1、getElementById()\r\n\r\n功能：查找网页中指定id的元素对象。\r\n\r\n语法：var obj = document.getElementById(id)\r\n\r\n2、getElementsByTagName(tagName)\r\n\r\n功能：查找指定的HTML标记，返回一个数组\r\n\r\n语法：var arrObj = parentNode.getElementsByTagName(tagName)\r\n\r\n参数：tagName是要查找的标记名称，不带尖括号。\r\n\r\n返回值：返回一个数组。如果只有一个节点，也返回一个数组。\r\n\r\n\r\n3、 getElementsByName(\"Name\")\r\n\r\n功能：通过name值获取元素，返回值是数组，通常用来获取有name的input的值\r\n\r\n4.getElementsByClassName()  \r\n\r\n功能：通过class名获取元素，返回值是数组\r\n\r\nES5新增选择器：\r\n\r\n5.document.querySelectorAll();    //强大到超乎想象，支持IE8+。ECMAScript借鉴了jQuery选择器的\r\n\r\n6.document.querySelector();  返回单个元素\n</code></pre>\n<h4>六、元素属性的对象：</h4>\n<p>a、在HTML中叫“标记”  b、 在DOM中叫“节点”    c、在JS中叫“对象”</p>\n<pre><code class=\"language-js\">tagName：标签名称，与核心DOM中nodeName一样\r\n\r\nclassName：CSS类的样式\r\n\r\nid：同HTML标记id属性一样\r\n\r\ntitle：同HTML标记的title属性一样\r\n\r\nstyle：同HTML标记的style属性一样\r\n\r\ninnerHTML：包含HTML标记中的所有的内容，包括HTML标记等\n</code></pre>\n<h4>七、CSS DOM动态样式</h4>\n<pre><code class=\"language-js\">使用JS操作CSS中的各种属性。JS只能操作或修改行内样式，对于类样式，通过className来赋值。\r\n\r\n如：imgObj.className=”imgClass”;\r\n\r\n1、style对象\r\n\r\n每个HTML标记，都有一个style属性。但这个style属性又是一个style对象。  \r\n\r\n那么，这个style对象属性有哪些？style对象的属性，与CSS中的属性，一一对应。\r\n\r\n因此，style对象用来代替CSS。\r\n\r\n如：imgObj.style.border=”1px solid red”;\r\n\r\n2、style对象属性与CSS属性的转换\r\n\r\n(1)、如果是一个单词，style对象属性，与CSS属性一样。\r\n\r\n(2)、如果是多个单词，第一个单词全小写，后面每个单词首字母大写，并去掉中划线。\n</code></pre>\n<h4>八、节点的操作</h4>\n<p>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）</p>\n<pre><code>childNodes 获取当前元素节点的所有子节点\r\n\r\nfirstChild 获取当前元素节点的第一个子节点\r\n\r\nlastChild 获取当前元素节点的最后一个子节点\r\n\r\npreviousSibling 获取当前节点的前一个同级节点 -(678不支持)\r\n\r\nnextSibling 获取当前节点的后一个同级节点 -(678不支持)\r\n\r\n以上五中方法都包含空白文本节点\r\n\r\nfirstElementChild   获取当前元素节点的第一个元素子节点\r\n\r\nlastElementChild  获取当前元素节点的最后一个元素子节点\r\n\r\npreviousElementSibling 查找当前元素的上一个元素\r\n\r\nnextElementSibling  查找当前元素的下一个元素  都是兄弟关系\r\n\r\nparentNode 获取当前节点的父元素\r\n\r\nchildren 获取所有的子节点  不返回其他节点\n</code></pre>\n<p>1、获取节点</p>\n<pre><code class=\"language-javascript\">//getAttribute()和getAttributeNode()区别，前者获取到的是属性节点的值，后者获取到的是属性节点\r\nvar box = document.querySelector('.box');\r\nconsole.log(box.getAttribute('class'));\r\nconsole.log(box.getAttributeNode('class'));\n</code></pre>\n<p>2、创建节点</p>\n<pre><code class=\"language-javascript\">//创建一个节点\r\nvar div = document.createElement('div');\r\n//添加到body里面\r\ndocument.body.appendChild(div);\r\n//可以给节点一个内容\r\ndiv.innerHTML = '这是创建出来的div节点';\r\n\r\n//参数1表示要添加的元素  参数2表示在添加的元素的后面元素\r\nbox.insertBefore(span, p);\n</code></pre>\n<p>3、设置节点</p>\n<p><font color=red>注意点：通过这种方式设置的属性节点，必须要配合提供的方式一起来使用</font></p>\n<pre><code class=\"language-javascript\">参数1表示节点名称  参数2表示属性节点的值\r\nbox.setAttribute('id', 'box');\r\nvar pic = document.querySelector('img');\r\npic.setAttribute('src', 'img/bom.png');\r\npic.setAttribute('width', '200');\r\npic.setAttribute('style', 'width:200px;height: 200px;border: 1px solid;');\n</code></pre>\n<p>4、删除节点</p>\n<pre><code class=\"language-JavaScript\">pic.removeAttribute('style');\r\n\r\n//删除一个节点removeChild()\r\ndiv.removeChild(p);\r\n//remove()表示删除当前项\r\np.remove();\n</code></pre>\n<h4>九、DOM尺寸和位置</h4>\n<pre><code>box.style.width\r\nbox.style.height\r\n只能获取到内联style属性的CSS样式中的宽和高，如果有，获取;如果没有，则返回空\r\n\r\nbox.clientWidth\r\nbox.clientHeight\r\n返回了元素大小，但没有单位，默认单位是px，如果设置了其他的单位，比如100em之类，返回出来的结果还会转换为px像素（不含边框） width + padding值\r\n\r\nbox.clientLeft\r\nbox.clientTop    获取左边框和上边框的宽度\r\n\r\nbox.scrollWidth\r\nbox.scrollHeight\r\n获取滚动内容的元素大小（当元素出现滚动条时，此属性指全部滚动内容的宽高）返回了元素大小，默认单位是px。如果没有设置任何CSS的宽和高度，它会得到计算后的宽度和高度  整个内容的\r\n\r\nbox.offsetWidth\r\nbox.offsetHeight\r\n返回了元素大小，默认单位是px。如果没有设置任何CSS的宽和高度，他会得到计算后的宽度和高度\r\n包含盒模型中除margin以外的宽高（包含边框）最稳定，使用最频繁\r\n\r\nbox.offsetLeft    需要定位参照  \r\n\r\nbox.offsetTop     获取元素当前相对于offsetParent父元素的位置\n</code></pre>\n<p>getComputedStyle().样式名  方法用于获取指定元素的 CSS 样式。获取的样式是元素在浏览器中最终渲染效果的样式。</p>\n<p>参数1表示元素， 不能设置引号。 参数2表示伪对象（一般设置为空）</p>\n<p>语法：getComputedStyle(元素名称).属性；</p>\n<p>currentStyle.样式名  只有IE浏览器支持，其他浏览器都不支持  如果当前元素没有设置样式，则返回它的默认属性</p>\n<p>获取非行内样式（兼容问题）</p>\n<pre><code class=\"language-js\">function getStyle(obj, name){\r\n    if(window.getComputedStyle){\r\n        //非IE浏览器\r\n        return getComputedStyle(obj, null)[name];\r\n    }else{\r\n        //针对IE浏览器\r\n        return obj.currentStyle[name];\r\n    }\r\n}\n</code></pre>","frontmatter":{"title":"BOM"}}},"pageContext":{"slug":"/docs/BOM&DOM/"}},
    "staticQueryHashes": ["3649515864"]}